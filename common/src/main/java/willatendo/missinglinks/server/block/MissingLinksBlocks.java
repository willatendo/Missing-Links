package willatendo.missinglinks.server.block;

import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.registries.Registries;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.ButtonBlock;
import net.minecraft.world.level.block.FenceBlock;
import net.minecraft.world.level.block.FenceGateBlock;
import net.minecraft.world.level.block.LeverBlock;
import net.minecraft.world.level.block.PressurePlateBlock;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.WallBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.BlockSetType;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import willatendo.missinglinks.server.utils.MissingLinksUtils;
import willatendo.simplelibrary.server.registry.SimpleHolder;
import willatendo.simplelibrary.server.registry.SimpleRegistry;

import java.util.List;

public class MissingLinksBlocks {
    public static final SimpleRegistry<Block> BLOCKS = SimpleRegistry.create(Registries.BLOCK, MissingLinksUtils.ID);

    public static final SimpleHolder<ButtonBlock> ANDESITE_BUTTON = BLOCKS.register("andesite_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> ANDESITE_PRESSURE_PLATE = BLOCKS.register("andesite_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> ANDESITE_LEVER = BLOCKS.register("andesite_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<ButtonBlock> DIORITE_BUTTON = BLOCKS.register("diorite_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> DIORITE_PRESSURE_PLATE = BLOCKS.register("diorite_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> DIORITE_LEVER = BLOCKS.register("diorite_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<ButtonBlock> GRANITE_BUTTON = BLOCKS.register("granite_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GRANITE_PRESSURE_PLATE = BLOCKS.register("granite_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GRANITE_LEVER = BLOCKS.register("granite_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<ButtonBlock> COBBLED_DEEPSLATE_BUTTON = BLOCKS.register("cobbled_deepslate_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> COBBLED_DEEPSLATE_PRESSURE_PLATE = BLOCKS.register("cobbled_deepslate_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> COBBLED_DEEPSLATE_LEVER = BLOCKS.register("cobbled_deepslate_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> CALCITE_STAIRS = BLOCKS.register("calcite_stairs", () -> new StairBlock(Blocks.CALCITE.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.CALCITE)));
    public static final SimpleHolder<SlabBlock> CALCITE_SLAB = BLOCKS.register("calcite_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CALCITE)));
    public static final SimpleHolder<WallBlock> CALCITE_WALL = BLOCKS.register("calcite_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CALCITE)));
    public static final SimpleHolder<ButtonBlock> CALCITE_BUTTON = BLOCKS.register("calcite_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> CALCITE_PRESSURE_PLATE = BLOCKS.register("calcite_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> CALCITE_LEVER = BLOCKS.register("calcite_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> TUFF_STAIRS = BLOCKS.register("tuff_stairs", () -> new StairBlock(Blocks.TUFF.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.TUFF)));
    public static final SimpleHolder<SlabBlock> TUFF_SLAB = BLOCKS.register("tuff_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.TUFF)));
    public static final SimpleHolder<WallBlock> TUFF_WALL = BLOCKS.register("tuff_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.TUFF)));
    public static final SimpleHolder<ButtonBlock> TUFF_BUTTON = BLOCKS.register("tuff_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> TUFF_PRESSURE_PLATE = BLOCKS.register("tuff_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> TUFF_LEVER = BLOCKS.register("tuff_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> DRIPSTONE_STAIRS = BLOCKS.register("dripstone_stairs", () -> new StairBlock(Blocks.DRIPSTONE_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.DRIPSTONE_BLOCK)));
    public static final SimpleHolder<SlabBlock> DRIPSTONE_SLAB = BLOCKS.register("dripstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.DRIPSTONE_BLOCK)));
    public static final SimpleHolder<WallBlock> DRIPSTONE_WALL = BLOCKS.register("dripstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.DRIPSTONE_BLOCK)));
    public static final SimpleHolder<ButtonBlock> DRIPSTONE_BUTTON = BLOCKS.register("dripstone_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> DRIPSTONE_PRESSURE_PLATE = BLOCKS.register("dripstone_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> DRIPSTONE_LEVER = BLOCKS.register("dripstone_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> SMOOTH_BASALT_STAIRS = BLOCKS.register("smooth_basalt_stairs", () -> new StairBlock(Blocks.SMOOTH_BASALT.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_BASALT)));
    public static final SimpleHolder<SlabBlock> SMOOTH_BASALT_SLAB = BLOCKS.register("smooth_basalt_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_BASALT)));
    public static final SimpleHolder<WallBlock> SMOOTH_BASALT_WALL = BLOCKS.register("smooth_basalt_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_BASALT)));
    public static final SimpleHolder<ButtonBlock> SMOOTH_BASALT_BUTTON = BLOCKS.register("smooth_basalt_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> SMOOTH_BASALT_PRESSURE_PLATE = BLOCKS.register("smooth_basalt_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> SMOOTH_BASALT_LEVER = BLOCKS.register("smooth_basalt_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> END_STONE_STAIRS = BLOCKS.register("end_stone_stairs", () -> new StairBlock(Blocks.END_STONE.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.END_STONE)));
    public static final SimpleHolder<SlabBlock> END_STONE_SLAB = BLOCKS.register("end_stone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.END_STONE)));
    public static final SimpleHolder<WallBlock> END_STONE_WALL = BLOCKS.register("end_stone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.END_STONE)));
    public static final SimpleHolder<ButtonBlock> END_STONE_BUTTON = BLOCKS.register("end_stone_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> END_STONE_PRESSURE_PLATE = BLOCKS.register("end_stone_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> END_STONE_LEVER = BLOCKS.register("end_stone_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> OBSIDIAN_STAIRS = BLOCKS.register("obsidian_stairs", () -> new StairBlock(Blocks.OBSIDIAN.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.OBSIDIAN)));
    public static final SimpleHolder<SlabBlock> OBSIDIAN_SLAB = BLOCKS.register("obsidian_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.OBSIDIAN)));
    public static final SimpleHolder<WallBlock> OBSIDIAN_WALL = BLOCKS.register("obsidian_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.OBSIDIAN)));
    public static final SimpleHolder<ButtonBlock> OBSIDIAN_BUTTON = BLOCKS.register("obsidian_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> OBSIDIAN_PRESSURE_PLATE = BLOCKS.register("obsidian_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> OBSIDIAN_LEVER = BLOCKS.register("obsidian_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> CRYING_OBSIDIAN_STAIRS = BLOCKS.register("crying_obsidian_stairs", () -> new StairBlock(Blocks.CRYING_OBSIDIAN.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.CRYING_OBSIDIAN)));
    public static final SimpleHolder<SlabBlock> CRYING_OBSIDIAN_SLAB = BLOCKS.register("crying_obsidian_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CRYING_OBSIDIAN)));
    public static final SimpleHolder<WallBlock> CRYING_OBSIDIAN_WALL = BLOCKS.register("crying_obsidian_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CRYING_OBSIDIAN)));
    public static final SimpleHolder<ButtonBlock> CRYING_OBSIDIAN_BUTTON = BLOCKS.register("crying_obsidian_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> CRYING_OBSIDIAN_PRESSURE_PLATE = BLOCKS.register("crying_obsidian_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> CRYING_OBSIDIAN_LEVER = BLOCKS.register("crying_obsidian_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> QUARTZ_BRICK_STAIRS = BLOCKS.register("quartz_brick_stairs", () -> new StairBlock(Blocks.QUARTZ_BRICKS.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.QUARTZ_BRICKS)));
    public static final SimpleHolder<SlabBlock> QUARTZ_BRICK_SLAB = BLOCKS.register("quartz_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.QUARTZ_BRICKS)));
    public static final SimpleHolder<WallBlock> QUARTZ_BRICK_WALL = BLOCKS.register("quartz_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.QUARTZ_BRICKS)));
    public static final SimpleHolder<ButtonBlock> QUARTZ_BRICK_BUTTON = BLOCKS.register("quartz_brick_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> QUARTZ_BRICK_PRESSURE_PLATE = BLOCKS.register("quartz_brick_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> QUARTZ_BRICK_LEVER = BLOCKS.register("quartz_brick_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final BlockBehaviour.Properties TERRACOTTA_PROPERTIES = BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.25F, 4.2F);
    public static final SimpleHolder<StairBlock> TERRACOTTA_STAIRS = BLOCKS.register("terracotta_stairs", () -> new StairBlock(Blocks.TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> TERRACOTTA_SLAB = BLOCKS.register("terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> TERRACOTTA_WALL = BLOCKS.register("terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> TERRACOTTA_BUTTON = BLOCKS.register("terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> TERRACOTTA_LEVER = BLOCKS.register("terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> WHITE_TERRACOTTA_STAIRS = BLOCKS.register("white_terracotta_stairs", () -> new StairBlock(Blocks.WHITE_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> WHITE_TERRACOTTA_SLAB = BLOCKS.register("white_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> WHITE_TERRACOTTA_WALL = BLOCKS.register("white_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> WHITE_TERRACOTTA_BUTTON = BLOCKS.register("white_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> WHITE_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("white_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> WHITE_TERRACOTTA_LEVER = BLOCKS.register("white_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> ORANGE_TERRACOTTA_STAIRS = BLOCKS.register("orange_terracotta_stairs", () -> new StairBlock(Blocks.ORANGE_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> ORANGE_TERRACOTTA_SLAB = BLOCKS.register("orange_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> ORANGE_TERRACOTTA_WALL = BLOCKS.register("orange_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> ORANGE_TERRACOTTA_BUTTON = BLOCKS.register("orange_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> ORANGE_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("orange_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> ORANGE_TERRACOTTA_LEVER = BLOCKS.register("orange_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> MAGENTA_TERRACOTTA_STAIRS = BLOCKS.register("magenta_terracotta_stairs", () -> new StairBlock(Blocks.MAGENTA_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> MAGENTA_TERRACOTTA_SLAB = BLOCKS.register("magenta_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> MAGENTA_TERRACOTTA_WALL = BLOCKS.register("magenta_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> MAGENTA_TERRACOTTA_BUTTON = BLOCKS.register("magenta_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> MAGENTA_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("magenta_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> MAGENTA_TERRACOTTA_LEVER = BLOCKS.register("magenta_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_BLUE_TERRACOTTA_STAIRS = BLOCKS.register("light_blue_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_BLUE_TERRACOTTA_SLAB = BLOCKS.register("light_blue_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_BLUE_TERRACOTTA_WALL = BLOCKS.register("light_blue_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_BLUE_TERRACOTTA_BUTTON = BLOCKS.register("light_blue_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_BLUE_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("light_blue_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_BLUE_TERRACOTTA_LEVER = BLOCKS.register("light_blue_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> YELLOW_TERRACOTTA_STAIRS = BLOCKS.register("yellow_terracotta_stairs", () -> new StairBlock(Blocks.YELLOW_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> YELLOW_TERRACOTTA_SLAB = BLOCKS.register("yellow_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> YELLOW_TERRACOTTA_WALL = BLOCKS.register("yellow_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> YELLOW_TERRACOTTA_BUTTON = BLOCKS.register("yellow_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> YELLOW_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("yellow_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> YELLOW_TERRACOTTA_LEVER = BLOCKS.register("yellow_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIME_TERRACOTTA_STAIRS = BLOCKS.register("lime_terracotta_stairs", () -> new StairBlock(Blocks.LIME_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIME_TERRACOTTA_SLAB = BLOCKS.register("lime_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIME_TERRACOTTA_WALL = BLOCKS.register("lime_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIME_TERRACOTTA_BUTTON = BLOCKS.register("lime_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIME_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("lime_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIME_TERRACOTTA_LEVER = BLOCKS.register("lime_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PINK_TERRACOTTA_STAIRS = BLOCKS.register("pink_terracotta_stairs", () -> new StairBlock(Blocks.PINK_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PINK_TERRACOTTA_SLAB = BLOCKS.register("pink_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> PINK_TERRACOTTA_WALL = BLOCKS.register("pink_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PINK_TERRACOTTA_BUTTON = BLOCKS.register("pink_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PINK_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("pink_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PINK_TERRACOTTA_LEVER = BLOCKS.register("pink_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GRAY_TERRACOTTA_STAIRS = BLOCKS.register("gray_terracotta_stairs", () -> new StairBlock(Blocks.GRAY_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GRAY_TERRACOTTA_SLAB = BLOCKS.register("gray_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> GRAY_TERRACOTTA_WALL = BLOCKS.register("gray_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GRAY_TERRACOTTA_BUTTON = BLOCKS.register("gray_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GRAY_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("gray_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GRAY_TERRACOTTA_LEVER = BLOCKS.register("gray_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_GRAY_TERRACOTTA_STAIRS = BLOCKS.register("light_gray_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_GRAY_TERRACOTTA_SLAB = BLOCKS.register("light_gray_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_GRAY_TERRACOTTA_WALL = BLOCKS.register("light_gray_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_GRAY_TERRACOTTA_BUTTON = BLOCKS.register("light_gray_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_GRAY_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("light_gray_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_GRAY_TERRACOTTA_LEVER = BLOCKS.register("light_gray_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> CYAN_TERRACOTTA_STAIRS = BLOCKS.register("cyan_terracotta_stairs", () -> new StairBlock(Blocks.CYAN_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> CYAN_TERRACOTTA_SLAB = BLOCKS.register("cyan_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> CYAN_TERRACOTTA_WALL = BLOCKS.register("cyan_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> CYAN_TERRACOTTA_BUTTON = BLOCKS.register("cyan_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> CYAN_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("cyan_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> CYAN_TERRACOTTA_LEVER = BLOCKS.register("cyan_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PURPLE_TERRACOTTA_STAIRS = BLOCKS.register("purple_terracotta_stairs", () -> new StairBlock(Blocks.PURPLE_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PURPLE_TERRACOTTA_SLAB = BLOCKS.register("purple_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> PURPLE_TERRACOTTA_WALL = BLOCKS.register("purple_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PURPLE_TERRACOTTA_BUTTON = BLOCKS.register("purple_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PURPLE_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("purple_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PURPLE_TERRACOTTA_LEVER = BLOCKS.register("purple_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLUE_TERRACOTTA_STAIRS = BLOCKS.register("blue_terracotta_stairs", () -> new StairBlock(Blocks.BLUE_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLUE_TERRACOTTA_SLAB = BLOCKS.register("blue_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLUE_TERRACOTTA_WALL = BLOCKS.register("blue_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLUE_TERRACOTTA_BUTTON = BLOCKS.register("blue_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLUE_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("blue_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLUE_TERRACOTTA_LEVER = BLOCKS.register("blue_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BROWN_TERRACOTTA_STAIRS = BLOCKS.register("brown_terracotta_stairs", () -> new StairBlock(Blocks.BROWN_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BROWN_TERRACOTTA_SLAB = BLOCKS.register("brown_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BROWN_TERRACOTTA_WALL = BLOCKS.register("brown_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BROWN_TERRACOTTA_BUTTON = BLOCKS.register("brown_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BROWN_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("brown_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BROWN_TERRACOTTA_LEVER = BLOCKS.register("brown_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GREEN_TERRACOTTA_STAIRS = BLOCKS.register("green_terracotta_stairs", () -> new StairBlock(Blocks.GREEN_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GREEN_TERRACOTTA_SLAB = BLOCKS.register("green_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> GREEN_TERRACOTTA_WALL = BLOCKS.register("green_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GREEN_TERRACOTTA_BUTTON = BLOCKS.register("green_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GREEN_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("green_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GREEN_TERRACOTTA_LEVER = BLOCKS.register("green_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> RED_TERRACOTTA_STAIRS = BLOCKS.register("red_terracotta_stairs", () -> new StairBlock(Blocks.RED_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> RED_TERRACOTTA_SLAB = BLOCKS.register("red_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> RED_TERRACOTTA_WALL = BLOCKS.register("red_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> RED_TERRACOTTA_BUTTON = BLOCKS.register("red_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> RED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("red_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> RED_TERRACOTTA_LEVER = BLOCKS.register("red_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLACK_TERRACOTTA_STAIRS = BLOCKS.register("black_terracotta_stairs", () -> new StairBlock(Blocks.BLACK_TERRACOTTA.defaultBlockState(), TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLACK_TERRACOTTA_SLAB = BLOCKS.register("black_terracotta_slab", () -> new SlabBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLACK_TERRACOTTA_WALL = BLOCKS.register("black_terracotta_wall", () -> new WallBlock(TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLACK_TERRACOTTA_BUTTON = BLOCKS.register("black_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLACK_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("black_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLACK_TERRACOTTA_LEVER = BLOCKS.register("black_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final BlockBehaviour.Properties GLAZED_TERRACOTTA_PROPERTIES = BlockBehaviour.Properties.of().mapColor(DyeColor.WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.4F).pushReaction(PushReaction.PUSH_ONLY);
    public static final SimpleHolder<StairBlock> WHITE_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("white_glazed_terracotta_stairs", () -> new StairBlock(Blocks.WHITE_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> WHITE_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("white_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> WHITE_GLAZED_TERRACOTTA_WALL = BLOCKS.register("white_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> WHITE_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("white_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> WHITE_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("white_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> WHITE_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("white_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> ORANGE_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("orange_glazed_terracotta_stairs", () -> new StairBlock(Blocks.ORANGE_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> ORANGE_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("orange_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> ORANGE_GLAZED_TERRACOTTA_WALL = BLOCKS.register("orange_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> ORANGE_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("orange_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> ORANGE_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("orange_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> ORANGE_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("orange_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> MAGENTA_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("magenta_glazed_terracotta_stairs", () -> new StairBlock(Blocks.MAGENTA_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> MAGENTA_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("magenta_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> MAGENTA_GLAZED_TERRACOTTA_WALL = BLOCKS.register("magenta_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> MAGENTA_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("magenta_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> MAGENTA_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("magenta_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> MAGENTA_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("magenta_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("light_blue_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("light_blue_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_WALL = BLOCKS.register("light_blue_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("light_blue_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("light_blue_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_BLUE_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("light_blue_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> YELLOW_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("yellow_glazed_terracotta_stairs", () -> new StairBlock(Blocks.YELLOW_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> YELLOW_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("yellow_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> YELLOW_GLAZED_TERRACOTTA_WALL = BLOCKS.register("yellow_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> YELLOW_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("yellow_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> YELLOW_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("yellow_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> YELLOW_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("yellow_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIME_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("lime_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIME_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIME_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("lime_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIME_GLAZED_TERRACOTTA_WALL = BLOCKS.register("lime_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIME_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("lime_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIME_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("lime_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIME_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("lime_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PINK_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("pink_glazed_terracotta_stairs", () -> new StairBlock(Blocks.PINK_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PINK_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("pink_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> PINK_GLAZED_TERRACOTTA_WALL = BLOCKS.register("pink_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PINK_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("pink_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PINK_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("pink_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PINK_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("pink_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GRAY_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("gray_glazed_terracotta_stairs", () -> new StairBlock(Blocks.GRAY_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GRAY_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("gray_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> GRAY_GLAZED_TERRACOTTA_WALL = BLOCKS.register("gray_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GRAY_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("gray_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GRAY_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("gray_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GRAY_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("gray_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("light_gray_glazed_terracotta_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("light_gray_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_WALL = BLOCKS.register("light_gray_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("light_gray_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("light_gray_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_GRAY_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("light_gray_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> CYAN_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("cyan_glazed_terracotta_stairs", () -> new StairBlock(Blocks.CYAN_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> CYAN_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("cyan_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> CYAN_GLAZED_TERRACOTTA_WALL = BLOCKS.register("cyan_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> CYAN_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("cyan_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> CYAN_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("cyan_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> CYAN_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("cyan_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PURPLE_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("purple_glazed_terracotta_stairs", () -> new StairBlock(Blocks.PURPLE_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PURPLE_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("purple_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> PURPLE_GLAZED_TERRACOTTA_WALL = BLOCKS.register("purple_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PURPLE_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("purple_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PURPLE_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("purple_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PURPLE_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("purple_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLUE_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("blue_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BLUE_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLUE_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("blue_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLUE_GLAZED_TERRACOTTA_WALL = BLOCKS.register("blue_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLUE_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("blue_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLUE_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("blue_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLUE_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("blue_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BROWN_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("brown_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BROWN_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BROWN_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("brown_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BROWN_GLAZED_TERRACOTTA_WALL = BLOCKS.register("brown_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BROWN_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("brown_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BROWN_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("brown_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BROWN_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("brown_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GREEN_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("green_glazed_terracotta_stairs", () -> new StairBlock(Blocks.GREEN_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GREEN_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("green_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> GREEN_GLAZED_TERRACOTTA_WALL = BLOCKS.register("green_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GREEN_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("green_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GREEN_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("green_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GREEN_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("green_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> RED_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("red_glazed_terracotta_stairs", () -> new StairBlock(Blocks.RED_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> RED_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("red_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> RED_GLAZED_TERRACOTTA_WALL = BLOCKS.register("red_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> RED_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("red_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> RED_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("red_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> RED_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("red_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLACK_GLAZED_TERRACOTTA_STAIRS = BLOCKS.register("black_glazed_terracotta_stairs", () -> new StairBlock(Blocks.BLACK_GLAZED_TERRACOTTA.defaultBlockState(), GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLACK_GLAZED_TERRACOTTA_SLAB = BLOCKS.register("black_glazed_terracotta_slab", () -> new SlabBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLACK_GLAZED_TERRACOTTA_WALL = BLOCKS.register("black_glazed_terracotta_wall", () -> new WallBlock(GLAZED_TERRACOTTA_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLACK_GLAZED_TERRACOTTA_BUTTON = BLOCKS.register("black_glazed_terracotta_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLACK_GLAZED_TERRACOTTA_PRESSURE_PLATE = BLOCKS.register("black_glazed_terracotta_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLACK_GLAZED_TERRACOTTA_LEVER = BLOCKS.register("black_glazed_terracotta_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final BlockBehaviour.Properties CONCRETE_PROPERTIES = BlockBehaviour.Properties.of().mapColor(DyeColor.WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.8F);
    public static final SimpleHolder<StairBlock> WHITE_CONCRETE_STAIRS = BLOCKS.register("white_concrete_stairs", () -> new StairBlock(Blocks.WHITE_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> WHITE_CONCRETE_SLAB = BLOCKS.register("white_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> WHITE_CONCRETE_WALL = BLOCKS.register("white_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> WHITE_CONCRETE_BUTTON = BLOCKS.register("white_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> WHITE_CONCRETE_PRESSURE_PLATE = BLOCKS.register("white_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> WHITE_CONCRETE_LEVER = BLOCKS.register("white_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> ORANGE_CONCRETE_STAIRS = BLOCKS.register("orange_concrete_stairs", () -> new StairBlock(Blocks.ORANGE_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> ORANGE_CONCRETE_SLAB = BLOCKS.register("orange_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> ORANGE_CONCRETE_WALL = BLOCKS.register("orange_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> ORANGE_CONCRETE_BUTTON = BLOCKS.register("orange_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> ORANGE_CONCRETE_PRESSURE_PLATE = BLOCKS.register("orange_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> ORANGE_CONCRETE_LEVER = BLOCKS.register("orange_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> MAGENTA_CONCRETE_STAIRS = BLOCKS.register("magenta_concrete_stairs", () -> new StairBlock(Blocks.MAGENTA_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> MAGENTA_CONCRETE_SLAB = BLOCKS.register("magenta_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> MAGENTA_CONCRETE_WALL = BLOCKS.register("magenta_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> MAGENTA_CONCRETE_BUTTON = BLOCKS.register("magenta_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> MAGENTA_CONCRETE_PRESSURE_PLATE = BLOCKS.register("magenta_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> MAGENTA_CONCRETE_LEVER = BLOCKS.register("magenta_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_BLUE_CONCRETE_STAIRS = BLOCKS.register("light_blue_concrete_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_BLUE_CONCRETE_SLAB = BLOCKS.register("light_blue_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_BLUE_CONCRETE_WALL = BLOCKS.register("light_blue_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_BLUE_CONCRETE_BUTTON = BLOCKS.register("light_blue_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_BLUE_CONCRETE_PRESSURE_PLATE = BLOCKS.register("light_blue_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_BLUE_CONCRETE_LEVER = BLOCKS.register("light_blue_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> YELLOW_CONCRETE_STAIRS = BLOCKS.register("yellow_concrete_stairs", () -> new StairBlock(Blocks.YELLOW_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> YELLOW_CONCRETE_SLAB = BLOCKS.register("yellow_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> YELLOW_CONCRETE_WALL = BLOCKS.register("yellow_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> YELLOW_CONCRETE_BUTTON = BLOCKS.register("yellow_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> YELLOW_CONCRETE_PRESSURE_PLATE = BLOCKS.register("yellow_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> YELLOW_CONCRETE_LEVER = BLOCKS.register("yellow_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIME_CONCRETE_STAIRS = BLOCKS.register("lime_concrete_stairs", () -> new StairBlock(Blocks.LIME_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIME_CONCRETE_SLAB = BLOCKS.register("lime_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIME_CONCRETE_WALL = BLOCKS.register("lime_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIME_CONCRETE_BUTTON = BLOCKS.register("lime_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIME_CONCRETE_PRESSURE_PLATE = BLOCKS.register("lime_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIME_CONCRETE_LEVER = BLOCKS.register("lime_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PINK_CONCRETE_STAIRS = BLOCKS.register("pink_concrete_stairs", () -> new StairBlock(Blocks.PINK_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PINK_CONCRETE_SLAB = BLOCKS.register("pink_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> PINK_CONCRETE_WALL = BLOCKS.register("pink_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PINK_CONCRETE_BUTTON = BLOCKS.register("pink_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PINK_CONCRETE_PRESSURE_PLATE = BLOCKS.register("pink_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PINK_CONCRETE_LEVER = BLOCKS.register("pink_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GRAY_CONCRETE_STAIRS = BLOCKS.register("gray_concrete_stairs", () -> new StairBlock(Blocks.GRAY_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GRAY_CONCRETE_SLAB = BLOCKS.register("gray_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> GRAY_CONCRETE_WALL = BLOCKS.register("gray_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GRAY_CONCRETE_BUTTON = BLOCKS.register("gray_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GRAY_CONCRETE_PRESSURE_PLATE = BLOCKS.register("gray_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GRAY_CONCRETE_LEVER = BLOCKS.register("gray_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> LIGHT_GRAY_CONCRETE_STAIRS = BLOCKS.register("light_gray_concrete_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_GRAY_CONCRETE_SLAB = BLOCKS.register("light_gray_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_GRAY_CONCRETE_WALL = BLOCKS.register("light_gray_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> LIGHT_GRAY_CONCRETE_BUTTON = BLOCKS.register("light_gray_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> LIGHT_GRAY_CONCRETE_PRESSURE_PLATE = BLOCKS.register("light_gray_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> LIGHT_GRAY_CONCRETE_LEVER = BLOCKS.register("light_gray_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> CYAN_CONCRETE_STAIRS = BLOCKS.register("cyan_concrete_stairs", () -> new StairBlock(Blocks.CYAN_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> CYAN_CONCRETE_SLAB = BLOCKS.register("cyan_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> CYAN_CONCRETE_WALL = BLOCKS.register("cyan_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> CYAN_CONCRETE_BUTTON = BLOCKS.register("cyan_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> CYAN_CONCRETE_PRESSURE_PLATE = BLOCKS.register("cyan_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> CYAN_CONCRETE_LEVER = BLOCKS.register("cyan_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> PURPLE_CONCRETE_STAIRS = BLOCKS.register("purple_concrete_stairs", () -> new StairBlock(Blocks.PURPLE_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PURPLE_CONCRETE_SLAB = BLOCKS.register("purple_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> PURPLE_CONCRETE_WALL = BLOCKS.register("purple_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> PURPLE_CONCRETE_BUTTON = BLOCKS.register("purple_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> PURPLE_CONCRETE_PRESSURE_PLATE = BLOCKS.register("purple_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> PURPLE_CONCRETE_LEVER = BLOCKS.register("purple_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLUE_CONCRETE_STAIRS = BLOCKS.register("blue_concrete_stairs", () -> new StairBlock(Blocks.BLUE_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLUE_CONCRETE_SLAB = BLOCKS.register("blue_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLUE_CONCRETE_WALL = BLOCKS.register("blue_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLUE_CONCRETE_BUTTON = BLOCKS.register("blue_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLUE_CONCRETE_PRESSURE_PLATE = BLOCKS.register("blue_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLUE_CONCRETE_LEVER = BLOCKS.register("blue_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BROWN_CONCRETE_STAIRS = BLOCKS.register("brown_concrete_stairs", () -> new StairBlock(Blocks.BROWN_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BROWN_CONCRETE_SLAB = BLOCKS.register("brown_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> BROWN_CONCRETE_WALL = BLOCKS.register("brown_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BROWN_CONCRETE_BUTTON = BLOCKS.register("brown_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BROWN_CONCRETE_PRESSURE_PLATE = BLOCKS.register("brown_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BROWN_CONCRETE_LEVER = BLOCKS.register("brown_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> GREEN_CONCRETE_STAIRS = BLOCKS.register("green_concrete_stairs", () -> new StairBlock(Blocks.GREEN_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GREEN_CONCRETE_SLAB = BLOCKS.register("green_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> GREEN_CONCRETE_WALL = BLOCKS.register("green_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> GREEN_CONCRETE_BUTTON = BLOCKS.register("green_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> GREEN_CONCRETE_PRESSURE_PLATE = BLOCKS.register("green_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> GREEN_CONCRETE_LEVER = BLOCKS.register("green_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> RED_CONCRETE_STAIRS = BLOCKS.register("red_concrete_stairs", () -> new StairBlock(Blocks.RED_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> RED_CONCRETE_SLAB = BLOCKS.register("red_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> RED_CONCRETE_WALL = BLOCKS.register("red_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> RED_CONCRETE_BUTTON = BLOCKS.register("red_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> RED_CONCRETE_PRESSURE_PLATE = BLOCKS.register("red_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> RED_CONCRETE_LEVER = BLOCKS.register("red_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<StairBlock> BLACK_CONCRETE_STAIRS = BLOCKS.register("black_concrete_stairs", () -> new StairBlock(Blocks.BLACK_CONCRETE.defaultBlockState(), CONCRETE_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLACK_CONCRETE_SLAB = BLOCKS.register("black_concrete_slab", () -> new SlabBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLACK_CONCRETE_WALL = BLOCKS.register("black_concrete_wall", () -> new WallBlock(CONCRETE_PROPERTIES));
    public static final SimpleHolder<ButtonBlock> BLACK_CONCRETE_BUTTON = BLOCKS.register("black_concrete_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> BLACK_CONCRETE_PRESSURE_PLATE = BLOCKS.register("black_concrete_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> BLACK_CONCRETE_LEVER = BLOCKS.register("black_concrete_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final BlockBehaviour.Properties WOOL_PROPERTIES = BlockBehaviour.Properties.of().mapColor(MapColor.SNOW).instrument(NoteBlockInstrument.GUITAR).strength(0.8F).sound(SoundType.WOOL).ignitedByLava();
    public static final SimpleHolder<StairBlock> WHITE_WOOL_STAIRS = BLOCKS.register("white_wool_stairs", () -> new StairBlock(Blocks.WHITE_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> WHITE_WOOL_SLAB = BLOCKS.register("white_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> WHITE_WOOL_WALL = BLOCKS.register("white_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> ORANGE_WOOL_STAIRS = BLOCKS.register("orange_wool_stairs", () -> new StairBlock(Blocks.ORANGE_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> ORANGE_WOOL_SLAB = BLOCKS.register("orange_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> ORANGE_WOOL_WALL = BLOCKS.register("orange_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> MAGENTA_WOOL_STAIRS = BLOCKS.register("magenta_wool_stairs", () -> new StairBlock(Blocks.MAGENTA_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> MAGENTA_WOOL_SLAB = BLOCKS.register("magenta_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> MAGENTA_WOOL_WALL = BLOCKS.register("magenta_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> LIGHT_BLUE_WOOL_STAIRS = BLOCKS.register("light_blue_wool_stairs", () -> new StairBlock(Blocks.LIGHT_BLUE_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_BLUE_WOOL_SLAB = BLOCKS.register("light_blue_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_BLUE_WOOL_WALL = BLOCKS.register("light_blue_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> YELLOW_WOOL_STAIRS = BLOCKS.register("yellow_wool_stairs", () -> new StairBlock(Blocks.YELLOW_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> YELLOW_WOOL_SLAB = BLOCKS.register("yellow_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> YELLOW_WOOL_WALL = BLOCKS.register("yellow_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> LIME_WOOL_STAIRS = BLOCKS.register("lime_wool_stairs", () -> new StairBlock(Blocks.LIME_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIME_WOOL_SLAB = BLOCKS.register("lime_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIME_WOOL_WALL = BLOCKS.register("lime_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> PINK_WOOL_STAIRS = BLOCKS.register("pink_wool_stairs", () -> new StairBlock(Blocks.PINK_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PINK_WOOL_SLAB = BLOCKS.register("pink_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> PINK_WOOL_WALL = BLOCKS.register("pink_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> GRAY_WOOL_STAIRS = BLOCKS.register("gray_wool_stairs", () -> new StairBlock(Blocks.GRAY_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GRAY_WOOL_SLAB = BLOCKS.register("gray_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> GRAY_WOOL_WALL = BLOCKS.register("gray_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> LIGHT_GRAY_WOOL_STAIRS = BLOCKS.register("light_gray_wool_stairs", () -> new StairBlock(Blocks.LIGHT_GRAY_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> LIGHT_GRAY_WOOL_SLAB = BLOCKS.register("light_gray_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> LIGHT_GRAY_WOOL_WALL = BLOCKS.register("light_gray_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> CYAN_WOOL_STAIRS = BLOCKS.register("cyan_wool_stairs", () -> new StairBlock(Blocks.CYAN_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> CYAN_WOOL_SLAB = BLOCKS.register("cyan_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> CYAN_WOOL_WALL = BLOCKS.register("cyan_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> PURPLE_WOOL_STAIRS = BLOCKS.register("purple_wool_stairs", () -> new StairBlock(Blocks.PURPLE_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> PURPLE_WOOL_SLAB = BLOCKS.register("purple_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> PURPLE_WOOL_WALL = BLOCKS.register("purple_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> BLUE_WOOL_STAIRS = BLOCKS.register("blue_wool_stairs", () -> new StairBlock(Blocks.BLUE_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLUE_WOOL_SLAB = BLOCKS.register("blue_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLUE_WOOL_WALL = BLOCKS.register("blue_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> BROWN_WOOL_STAIRS = BLOCKS.register("brown_wool_stairs", () -> new StairBlock(Blocks.BROWN_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BROWN_WOOL_SLAB = BLOCKS.register("brown_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> BROWN_WOOL_WALL = BLOCKS.register("brown_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> GREEN_WOOL_STAIRS = BLOCKS.register("green_wool_stairs", () -> new StairBlock(Blocks.GREEN_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> GREEN_WOOL_SLAB = BLOCKS.register("green_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> GREEN_WOOL_WALL = BLOCKS.register("green_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> RED_WOOL_STAIRS = BLOCKS.register("red_wool_stairs", () -> new StairBlock(Blocks.RED_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> RED_WOOL_SLAB = BLOCKS.register("red_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> RED_WOOL_WALL = BLOCKS.register("red_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> BLACK_WOOL_STAIRS = BLOCKS.register("black_wool_stairs", () -> new StairBlock(Blocks.BLACK_WOOL.defaultBlockState(), WOOL_PROPERTIES));
    public static final SimpleHolder<SlabBlock> BLACK_WOOL_SLAB = BLOCKS.register("black_wool_slab", () -> new SlabBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<WallBlock> BLACK_WOOL_WALL = BLOCKS.register("black_wool_wall", () -> new WallBlock(WOOL_PROPERTIES));
    public static final SimpleHolder<StairBlock> CLAY_STAIRS = BLOCKS.register("clay_stairs", () -> new StairBlock(Blocks.CLAY.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.CLAY)));
    public static final SimpleHolder<SlabBlock> CLAY_SLAB = BLOCKS.register("clay_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CLAY)));
    public static final SimpleHolder<WallBlock> CLAY_WALL = BLOCKS.register("clay_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.CLAY)));
    public static final SimpleHolder<StairBlock> PACKED_MUD_STAIRS = BLOCKS.register("packed_mud_stairs", () -> new StairBlock(Blocks.PACKED_MUD.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.PACKED_MUD)));
    public static final SimpleHolder<SlabBlock> PACKED_MUD_SLAB = BLOCKS.register("packed_mud_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.PACKED_MUD)));
    public static final SimpleHolder<WallBlock> PACKED_MUD_WALL = BLOCKS.register("packed_mud_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.PACKED_MUD)));
    public static final SimpleHolder<StairBlock> SCULK_STAIRS = BLOCKS.register("sculk_stairs", () -> new StairBlock(Blocks.SCULK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.SCULK)));
    public static final SimpleHolder<SlabBlock> SCULK_SLAB = BLOCKS.register("sculk_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SCULK)));
    public static final SimpleHolder<WallBlock> SCULK_WALL = BLOCKS.register("sculk_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SCULK)));
    public static final SimpleHolder<StairBlock> COAL_STAIRS = BLOCKS.register("coal_stairs", () -> new StairBlock(Blocks.COAL_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.COAL_BLOCK)));
    public static final SimpleHolder<SlabBlock> COAL_SLAB = BLOCKS.register("coal_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.COAL_BLOCK)));
    public static final SimpleHolder<WallBlock> COAL_WALL = BLOCKS.register("coal_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.COAL_BLOCK)));
    public static final SimpleHolder<StairBlock> IRON_STAIRS = BLOCKS.register("iron_stairs", () -> new StairBlock(Blocks.IRON_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.IRON_BLOCK)));
    public static final SimpleHolder<SlabBlock> IRON_SLAB = BLOCKS.register("iron_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.IRON_BLOCK)));
    public static final SimpleHolder<WallBlock> IRON_WALL = BLOCKS.register("iron_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.IRON_BLOCK)));
    public static final SimpleHolder<StairBlock> GOLD_STAIRS = BLOCKS.register("gold_stairs", () -> new StairBlock(Blocks.GOLD_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.GOLD_BLOCK)));
    public static final SimpleHolder<SlabBlock> GOLD_SLAB = BLOCKS.register("gold_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.GOLD_BLOCK)));
    public static final SimpleHolder<WallBlock> GOLD_WALL = BLOCKS.register("gold_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.GOLD_BLOCK)));
    public static final SimpleHolder<StairBlock> REDSTONE_STAIRS = BLOCKS.register("redstone_stairs", () -> new PoweredStairBlock(Blocks.REDSTONE_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.REDSTONE_BLOCK)));
    public static final SimpleHolder<SlabBlock> REDSTONE_SLAB = BLOCKS.register("redstone_slab", () -> new PoweredSlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.REDSTONE_BLOCK)));
    public static final SimpleHolder<WallBlock> REDSTONE_WALL = BLOCKS.register("redstone_wall", () -> new PoweredWallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.REDSTONE_BLOCK)));
    public static final SimpleHolder<StairBlock> EMERALD_STAIRS = BLOCKS.register("emerald_stairs", () -> new StairBlock(Blocks.EMERALD_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.EMERALD_BLOCK)));
    public static final SimpleHolder<SlabBlock> EMERALD_SLAB = BLOCKS.register("emerald_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.EMERALD_BLOCK)));
    public static final SimpleHolder<WallBlock> EMERALD_WALL = BLOCKS.register("emerald_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.EMERALD_BLOCK)));
    public static final SimpleHolder<StairBlock> LAPIS_STAIRS = BLOCKS.register("lapis_stairs", () -> new StairBlock(Blocks.LAPIS_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.LAPIS_BLOCK)));
    public static final SimpleHolder<SlabBlock> LAPIS_SLAB = BLOCKS.register("lapis_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LAPIS_BLOCK)));
    public static final SimpleHolder<WallBlock> LAPIS_WALL = BLOCKS.register("lapis_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LAPIS_BLOCK)));
    public static final SimpleHolder<StairBlock> DIAMOND_STAIRS = BLOCKS.register("diamond_stairs", () -> new StairBlock(Blocks.DIAMOND_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.DIAMOND_BLOCK)));
    public static final SimpleHolder<SlabBlock> DIAMOND_SLAB = BLOCKS.register("diamond_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.DIAMOND_BLOCK)));
    public static final SimpleHolder<WallBlock> DIAMOND_WALL = BLOCKS.register("diamond_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.DIAMOND_BLOCK)));
    public static final SimpleHolder<StairBlock> NETHERITE_STAIRS = BLOCKS.register("netherite_stairs", () -> new StairBlock(Blocks.NETHERITE_BLOCK.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.NETHERITE_BLOCK)));
    public static final SimpleHolder<SlabBlock> NETHERITE_SLAB = BLOCKS.register("netherite_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.NETHERITE_BLOCK)));
    public static final SimpleHolder<WallBlock> NETHERITE_WALL = BLOCKS.register("netherite_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.NETHERITE_BLOCK)));
    public static final SimpleHolder<WallBlock> QUARTZ_WALL = BLOCKS.register("quartz_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.QUARTZ_BLOCK)));
    public static final SimpleHolder<ButtonBlock> QUARTZ_BUTTON = BLOCKS.register("quartz_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> QUARTZ_PRESSURE_PLATE = BLOCKS.register("quartz_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> QUARTZ_LEVER = BLOCKS.register("quartz_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<WallBlock> SMOOTH_QUARTZ_WALL = BLOCKS.register("smooth_quartz_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_QUARTZ)));
    public static final SimpleHolder<ButtonBlock> SMOOTH_QUARTZ_BUTTON = BLOCKS.register("smooth_quartz_button", () -> (ButtonBlock) Blocks.stoneButton());
    public static final SimpleHolder<PressurePlateBlock> SMOOTH_QUARTZ_PRESSURE_PLATE = BLOCKS.register("smooth_quartz_pressure_plate", () -> new PressurePlateBlock(BlockSetType.STONE, BlockBehaviour.Properties.ofFullCopy(Blocks.STONE_PRESSURE_PLATE)));
    public static final SimpleHolder<LeverBlock> SMOOTH_QUARTZ_LEVER = BLOCKS.register("smooth_quartz_lever", () -> new LeverBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.LEVER)));
    public static final SimpleHolder<WallBlock> SMOOTH_RED_SANDSTONE_WALL = BLOCKS.register("smooth_red_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_RED_SANDSTONE)));
    public static final SimpleHolder<WallBlock> SMOOTH_SANDSTONE_WALL = BLOCKS.register("smooth_sandstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_SANDSTONE)));
    public static final SimpleHolder<StairBlock> SMOOTH_STONE_STAIRS = BLOCKS.register("smooth_stone_stairs", () -> new StairBlock(Blocks.SMOOTH_STONE.defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_STONE)));
    public static final SimpleHolder<WallBlock> SMOOTH_STONE_WALL = BLOCKS.register("smooth_stone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.SMOOTH_STONE)));
    public static final SimpleHolder<FenceBlock> RED_NETHER_BRICK_FENCE = BLOCKS.register("red_nether_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.RED_NETHER_BRICKS)));
    private static final WoodType IRON = new WoodType("iron", BlockSetType.IRON);
    public static final SimpleHolder<FenceGateBlock> RED_NETHER_BRICK_FENCE_GATE = BLOCKS.register("red_nether_brick_fence_gate", () -> new FenceGateBlock(IRON, BlockBehaviour.Properties.ofFullCopy(Blocks.RED_NETHER_BRICKS)));
    public static final SimpleHolder<FenceGateBlock> NETHER_BRICK_FENCE_GATE = BLOCKS.register("nether_brick_fence_gate", () -> new FenceGateBlock(IRON, BlockBehaviour.Properties.ofFullCopy(Blocks.NETHER_BRICKS)));

    public static void init(List<SimpleRegistry<?>> simpleRegistries) {
        simpleRegistries.add(BLOCKS);
    }
}
